#include <SPI.h>
#include <Ethernet.h>
#include <nRF24L01.h>
#include <RF24.h>
#include "printf.h"
/**************************************************************************/
/* start customization */
String environmentId = "fieldTrial1Env";
//String environmentId = "marco.mancaEnv";

byte mac[] = { 0x90, 0xA2, 0xDA, 0x00, 0x23, 0x36 }; //MAC address found on the back of your ethernet shield.

/* These are the settings in case the router does not support DHCP configuration */
IPAddress ip(146, 48, 85, 69); // IP set static Ip address.
IPAddress dnServer(146, 48, 80, 3);// the dns
IPAddress gateway(146, 48, 80, 1);// the router's gateway address.
IPAddress subnet(255, 255, 248, 0);// the subnet.

/* end customization */
/**************************************************************************/
RF24 radio (7, 8);//arduino uno [master]


EthernetClient client;
IPAddress server(146, 48, 82, 160);       //giove.isti.cnr.it
//IPAddress server(146, 48, 85, 134);       //taurus.isti.cnr.it

#define PLOAD_WIDTH  32  // 32 unsigned chars TX payload
byte pip;
byte pload_width_now;
byte newdata;
unsigned char rx_buf[PLOAD_WIDTH] = {0};
//temp - humidity - pipe 0xb1
struct dataStruct1 {
  String nameSensor;
  int temp;
  int humidity;
} transmitter1_data;
//motion - pipe 0xb2
struct dataStruct2 {
  String nameSensor;
  int data;
} transmitter2_data;
//gas - pipe 0xb3
struct dataStruct3 {
  String nameSensor;
  int data;
} transmitter3_data;

unsigned char ADDRESS0[5]  =
{
  0xb0, 0x43, 0x88, 0x99, 0x45
};

unsigned char ADDRESS1[5]  =
{
  0xb1, 0x43, 0x88, 0x99, 0x45
};

unsigned char ADDRESS2[1] = {0xb2};
unsigned char ADDRESS3[1] = {0xb3};
//unsigned char ADDRESS4[1] = {0xb4};
//unsigned char ADDRESS5[1] = {0xb5};

void setup() {

  radio.begin();
  printf_begin();
  Serial.begin(115200);
  radio.setPALevel(RF24_PA_LOW);
  radio.enableDynamicPayloads();
  radio.openWritingPipe(ADDRESS0);
  radio.openReadingPipe(0, ADDRESS0);
  radio.openReadingPipe(1, ADDRESS1);
  radio.openReadingPipe(2, ADDRESS2);
  radio.openReadingPipe(3, ADDRESS3);
  //radio.openReadingPipe(4, ADDRESS4);
  //radio.openReadingPipe(5, ADDRESS5);

  radio.startListening();
  radio.printDetails();

  //al cnr ci sono problemi col dhcp, quindi bisogna settare la configurazione statica
  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP");
    Ethernet.begin(mac, ip, dnServer, gateway, subnet);
    Serial.println("Ethernet configured with static ip");        
  } else {
      Serial.print("My IP address [DHCP]: ");
      for (byte thisByte = 0; thisByte < 4; thisByte++) {
        Serial.print(Ethernet.localIP()[thisByte], DEC);
        Serial.print("."); 
      }
      Serial.println();
  }
  delay(1000);
  if (client.connect(server, 8880)) {
    Serial.println("connected to cm");
  } else {
    Serial.println("Not connected to cm");
  }
  //renewIP();
}

void loop() {
  if ( radio.available(&pip) ) {
    // Fetch the payload, and see if this was the last one.
    pload_width_now = radio.getDynamicPayloadSize();
    // If a corrupt dynamic payload is received, it will be flushed
    if (!pload_width_now) {

    }
    else {
      radio.read( rx_buf, pload_width_now );
      newdata = 1;
      // Spew it
      Serial.print(F("Data on pip= "));
      Serial.println(pip);
    }
  }
  if (newdata == 1) {
    newdata = 0;
    //temp - humidity
    if (pip == 1 && pload_width_now == sizeof(transmitter1_data)) {
      memcpy(&transmitter1_data, rx_buf, sizeof(transmitter1_data));
      Serial.print(" Temp ");
      Serial.println(transmitter1_data.temp);
      Serial.print(" Humidity ");
      Serial.println(transmitter1_data.humidity);
            
      sendDataToCMViaPOST();
    }
    //motion
    if (pip == 2 && pload_width_now == sizeof(transmitter2_data))
    {
      memcpy(&transmitter2_data, rx_buf, sizeof(transmitter2_data));

      Serial.print(" Motion ");
      Serial.println(transmitter2_data.data);
      
      sendDataToCMViaGET(0);
    }
    //gas
    if (pip == 3 && pload_width_now == sizeof(transmitter3_data)) {
      memcpy(&transmitter3_data, rx_buf, sizeof(transmitter3_data));
    
      Serial.print(" Gas presence ");
      Serial.println(transmitter3_data.data);
     
      sendDataToCMViaGET(1);
    }

    Serial.println("");
  }
  
  delay(1000);
}

void sendDataToCMViaGET(int idx) {
  if (client.available()) {
    char c = client.read();
    Serial.write(c);
  }
  client.stop();  
  if (client.connect(server, 8880)) {
    Serial.println(F("Connected to CM"));
    if(idx == 0) {
      if(transmitter2_data.data == 0)
        client.println("GET /cm/rest/environment/" + environmentId + "/motion/false HTTP/1.1");  
      else
        client.println("GET /cm/rest/environment/" + environmentId + "/motion/true HTTP/1.1");  
      
    } else if(idx == 1) {
      Serial.print("Gas received ");
      Serial.println(transmitter3_data.data);
      if(transmitter3_data.data == 0)
        client.println("GET /cm/rest/environment/" + environmentId + "/gas-sensor/false HTTP/1.1");      
      else
        client.println("GET /cm/rest/environment/" + environmentId + "/gas-sensor/true HTTP/1.1");      
    }
    client.println("Host: giove.isti.cnr.it");
    client.println("Connection: close");
    client.println();
  } else {
    Serial.println("Not connected");
  }
  
  String readBuffer = "";
  while (client.connected() || client.available()) {
    if (client.available()) {
      readBuffer += client.read();
    } 
  }
  Serial.print("CM: ");
  Serial.print(environmentId);
  Serial.print("data: ");
  Serial.println(transmitter2_data.data);
  Serial.print("data: ");
  Serial.print(transmitter3_data.data);
  Serial.print("res: ");
  Serial.println(readBuffer);
}

void sendDataToCMViaPOST() {
  String bodyData = "{\"temperature\":" + String(transmitter1_data.temp) + ", \"humidity\":" + String(transmitter1_data.humidity) + "}";
  Serial.print("body data ");
  Serial.println(bodyData);
  if (client.available()) {
    char c = client.read();
    Serial.write(c);
  }
  client.stop();  
  if (client.connect(server, 8880)) {
    Serial.println(F("Connected to CM"));
    client.println("POST /cm/rest/environment/" + environmentId + "/DHT11Sensors" + " HTTP/1.1");
    client.println("Host: giove.isti.cnr.it");
    client.println("Content-Type: application/json");
    client.print("Content-Length: ");
    client.println(bodyData.length());
    client.println("Connection: close");
    client.println();
    client.print(bodyData);
  }
  String readBuffer = "";
  while (client.connected() || client.available()) {
    if (client.available()) {
      readBuffer += client.read();
    }
  }
  Serial.print("CM: ");
  Serial.print(environmentId);
  Serial.print("data: ");
  Serial.print(bodyData);
  Serial.print("res: ");
  Serial.println(readBuffer);
}

